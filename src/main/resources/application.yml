spring:
  datasource:
    url: jdbc:postgresql://${DB_SERVER}
    username: ${keyvault.cardMDbUsername}
    password: ${keyvault.cardMDbPassword}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  application:
    name: Tkm Card Manager ${HOSTNAME:0}
  kafka:
    consumer:
      bootstrap-servers: ${KAFKA_SERVERS}
      client-id: ${KAFKA_GROUP_ID}${HOSTNAME:0}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: true
      group-id: ${KAFKA_CONSUMER_GROUP_ID}
      auto-offset-reset: ${AUTO_OFFSET_RESET}
      properties:
        security:
          protocol: ${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
        sasl:
          mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
    producer:
      bootstrap-servers: ${KAFKA_SERVERS}
      client-id: ${KAFKA_GROUP_ID}${HOSTNAME:0}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        security:
          protocol: ${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
        sasl:
          mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
    topics:
      read-queue:
        name: ${KAFKA_READ_QUEUE_TOPIC}
        group-id: ${KAFKA_READ_QUEUE_GROUP}
        client-id: ${KAFKA_READ_QUEUE_GROUP}${HOSTNAME:0}
        concurrency: ${KAFKA_READ_MAX_NUMBER_OF_THREADS:1}
        jaas:
          config: ${keyvault.tkmReadTokenParPanProducerSaslJaasConfig}
      delete-queue:
        name: ${KAFKA_DELETE_QUEUE_TOPIC}
        group-id: ${KAFKA_DELETE_QUEUE_GROUP}
        client-id: ${KAFKA_DELETE_QUEUE_GROUP}${HOSTNAME:0}
        concurrency: ${KAFKA_DELETE_MAX_NUMBER_OF_THREADS:1}
        jaas:
          config: ${keyvault.tkmDeleteTokenParPanProducerSaslJaasConfig}
      write-queue:
        name: ${KAFKA_WRITE_QUEUE_TOPIC}
        jaas:
          config: ${keyvault.tkmWriteTokenParPanProducerSaslJaasConfig}
      dlt-queue: ${KAFKA_DLT_QUEUE_TOPIC}
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:/}

logging:
  level:
    root: ${LOGGING_LEVEL:INFO}
    org:
      hibernate:
        SQL: INFO
        type:
          descriptor:
            sql:
              BasicBinder: INFO
  pattern:
    level: "${LOGGING_PATTERN:%p [${spring.application.name}][%X{traceId}|%X{spanId}]}"
azure:
  keyvault:
    enabled: true
    client-id: ${AZURE_KEYVAULT_CLIENT_ID}
    client-key: ${AZURE_KEYVAULT_CLIENT_KEY}
    tenant-id: ${AZURE_KEYVAULT_TENANT_ID}
    uri: ${AZURE_KEYVAULT_URI}

keyvault:
  eventhubLogSaslJaasConfig: ${${AZURE_KEYVAULT_PROFILE:prod}-eventhubLogSaslJaasConfig:null}
  cardMEventhubReadSaslJaasConfig: ${${AZURE_KEYVAULT_PROFILE:prod}-cardMEventhubReadSaslJaasConfig:null}
  cardMEventhubWriteSaslJaasConfig: ${${AZURE_KEYVAULT_PROFILE:prod}-cardMEventhubWriteSaslJaasConfig:null}
  cardMEventhubDeleteSaslJaasConfig: ${${AZURE_KEYVAULT_PROFILE:prod}-cardMEventhubDeleteSaslJaasConfig:null}
  readQueuePrvPgpKey: ${${AZURE_KEYVAULT_PROFILE:prod}-readQueuePrvPgpKey}
  readQueuePubPgpKey: ${${AZURE_KEYVAULT_PROFILE:prod}-readQueuePubPgpKey}
  readQueuePrvPgpKeyPassphrase: ${${AZURE_KEYVAULT_PROFILE:prod}-readQueuePrvPgpKeyPassphrase:null}
  cardMDbUsername: ${${AZURE_KEYVAULT_PROFILE:prod}-cardMDbUsername}
  cardMDbPassword: ${${AZURE_KEYVAULT_PROFILE:prod}-cardMDbPassword}
  apimSubscriptionTkmRtd: ${${AZURE_KEYVAULT_PROFILE:prod}-apimSubscriptionTkmRtd}
  tkmReadTokenParPanProducerSaslJaasConfig:  ${${AZURE_KEYVAULT_PROFILE:prod}-tkmReadTokenParPanProducerSaslJaasConfig}
  tkmWriteTokenParPanProducerSaslJaasConfig:  ${${AZURE_KEYVAULT_PROFILE:prod}-tkmWriteTokenParPanProducerSaslJaasConfig}
  tkmDeleteTokenParPanProducerSaslJaasConfig:  ${${AZURE_KEYVAULT_PROFILE:prod}-tkmDeleteTokenParPanProducerSaslJaasConfig}

client-urls:
  consent-manager: ${CONSENT_MANAGER_URL}
  rtd-hashing-url: ${RTD_HASHING_URL}

management:
  endpoints:
    web:
      exposure:
        include: "info,health,prometheus"


batch:
  kafka-dlt-read:
    cron: ${KAFKA_DLT_READ_CRON:-}