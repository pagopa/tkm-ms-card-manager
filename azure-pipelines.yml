# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - hotfix/*
pr: none

variables:
  dockerfileRelativePath: 'Dockerfile'

  # Agent VM image name for Build
  vmImageNameDefault: 'ubuntu-latest'

  # Image Repository Name
  imageRepository: 'tkmmscardmanager'

  isToDeploy: $[ne(variables['Build.Reason'], 'PullRequest')]
  isSIT: $[eq(variables['Build.SourceBranch'], 'refs/heads/release/sit')]
  isUAT: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/release/uat'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix'))]
  isPROD: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release/sit') }}:
    dockerRegistryServiceConnection: 'tkm-cstaruatregistry-connector'
    containerRegistry: 'cstaruatregistry.azurecr.io'
    enviroment: sit
    imagePullSecret: 'tkmsitregistry-auth'
  ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/release/uat'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix')) }}:
    dockerRegistryServiceConnection: 'tkm-cstaruatregistry-connector'
    containerRegistry: 'cstaruatregistry.azurecr.io'
    enviroment: uat
    imagePullSecret: 'tkmuatregistry-auth'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    dockerRegistryServiceConnection: 'tkm-cstaruatregistry-connector'
    containerRegistry: ''
    imagePullSecret: ''
    enviroment: prod
  ${{ if and(not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release')), ne(variables['Build.SourceBranch'], 'refs/heads/master'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix'))) }}:
    dockerRegistryServiceConnection: ''
    enviroment: sit

  maven_cache_folder: $(Pipeline.Workspace)/.m2/repository

stages:
  - stage: Test_Develop_Release
    displayName: Test Develop and Prepare Release
    condition: or(eq(variables.isPullRequest, true), and(ne(variables.isSIT, true), ne(variables.isUAT, true), ne(variables.isPROD, true)))
    jobs:
      - job: Test
        displayName: Test
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Cache@2
            displayName: Cache Maven
            inputs:
              key: 'maven | "$(Agent.OS)" | tkmcardmanager'
              restoreKeys: |
                maven | "$(Agent.OS)" | tkmcardmanager
                maven | "$(Agent.OS)"
                maven
              path: $(maven_cache_folder)
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'
              options: '-B -s $(settingsxml.secureFilePath) -T1C -Dmaven.repo.local=$(maven_cache_folder)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false

      - job: Release
        displayName: Prepare release
        dependsOn: Test
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - checkout: self
            persistCredentials: true
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Cache@2
            displayName: Cache Maven
            inputs:
              key: 'maven | "$(Agent.OS)" | tkmcardmanager'
              restoreKeys: |
                maven | "$(Agent.OS)" | tkmcardmanager
                maven | "$(Agent.OS)"
                maven
              path: $(maven_cache_folder)

          - task: Bash@3
            displayName: Git config
            name: setgitconfig
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "tkm_build_service"
              failOnStderr: true

          - task: Bash@3
            displayName: Git checkout
            name: gitcheckout
            inputs:
              targetType: 'inline'
              script: |
                git checkout -q ${{ variables['Build.SourceBranchName'] }}
              failOnStderr: true

          - task: Bash@3
            displayName: Get release version
            name: getreleaseversion
            inputs:
              targetType: 'inline'
              script: |
                releaseVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s $(settingsxml.secureFilePath))
                releaseVersion=${releaseVersion/-SNAPSHOT/}
                echo "##vso[task.setvariable variable=version;isOutput=true]$releaseVersion"
                echo "Current Release Version ${releaseVersion}"
              failOnStderr: true

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'release:clean release:prepare '
              options: '--batch-mode -DscmCommentPrefix="[skip ci]" -s $(settingsxml.secureFilePath) -T1C -Darguments=-DskipTests -Dmaven.repo.local=$(maven_cache_folder)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false

          - task: Bash@3
            displayName: Git push on develop branch
            name: gitpushdev
            inputs:
              targetType: 'inline'
              script: |
                git push -q origin ${{ variables['Build.SourceBranchName'] }}
              failOnStderr: true

          - task: Bash@3
            displayName: Git push on tag
            name: gitpushtag
            inputs:
              targetType: 'inline'
              script: |
                git push -q origin --tags
              failOnStderr: true

          - task: Bash@3
            displayName: Git create tmp branch
            name: gitcreatetmp
            inputs:
              targetType: 'inline'
              script: |
                git checkout -q -b tmp/$(getreleaseversion.version) card-manager-$(getreleaseversion.version)
              failOnStderr: true

          - task: Bash@3
            displayName: Git push on tmp branch
            name: gitpushtmp
            inputs:
              targetType: 'inline'
              script: |
                git push -q --set-upstream origin tmp/$(getreleaseversion.version)

  - stage: POM
    displayName: POM
    condition: and(eq(variables.isToDeploy, true),or(eq(variables.isSIT, true),eq(variables.isUAT, true),eq(variables.isPROD, true)))
    jobs:
      - job: POM
        displayName: POM
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            condition:  eq(variables.isToDeploy, true)
            inputs:
              targetType: 'inline'
              script: |
                version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s $(settingsxml.secureFilePath))
                echo "##vso[task.setvariable variable=outputpomversion;isOutput=true]$version"
                echo "Current Project Version ${version}"
              failOnStderr: true

  - stage: SIT
    displayName: SIT
    dependsOn: POM
    condition: and(eq(variables.isToDeploy, true), eq(variables.isSIT, true))
    variables:
      pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Cache@2
            displayName: Cache Maven
            inputs:
              key: 'maven | "$(Agent.OS)" | tkmcardmanager'
              restoreKeys: |
                maven | "$(Agent.OS)" | tkmcardmanager
                maven | "$(Agent.OS)"
                maven
              path: $(maven_cache_folder)
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'deploy'
              options: '-B -s $(settingsxml.secureFilePath) -DskipTests=false -Dmaven.repo.local=$(maven_cache_folder)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact target'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/target'
              artifact: 'target'
              publishLocation: 'pipeline'

      - job: Push
        displayName: Push
        dependsOn: Build
        condition: succeeded()
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'target'
              targetPath: '$(Pipeline.Workspace)/target'
          - task: Bash@3
            displayName: PrintInfo
            name: PrintInfo
            inputs:
              targetType: 'inline'
              script: |
                echo "$(dockerRegistryServiceConnection)"
                echo "$(imageRepository)"
              failOnStderr: true
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Pipeline.Workspace)'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion)

      - deployment: Deploy
        displayName: Deploy
        dependsOn: Push
        condition: and(succeeded(), eq(variables.isToDeploy, true), eq(variables.isSIT, true))
        pool:
          name: uat_agent_pool
        environment: 'sit'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: 'Create Namespace'
                  inputs:
                    namespace: tkm-sit
                    action: deploy
                    kubernetesServiceConnection: 'ddsakstest-self-connection-tkm-sit'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/namespace-$(enviroment).yml
#                - task: DownloadSecureFile@1
#                  displayName: 'download keyvault-connection-informations.yaml'
#                  name: keyvaultconnectioninformations
#                  inputs:
#                    secureFile: keyvault-connection-informations-$(enviroment).yaml
#                    retryCount: '2'
#                - task: DownloadSecureFile@1
#                  displayName: 'download jvm.yaml'
#                  name: jvm
#                  inputs:
#                    secureFile: jvm-$(enviroment).yaml
#                    retryCount: '2'
#                - task: DownloadSecureFile@1
#                  displayName: 'download kafka-log-configuration.yaml'
#                  name: kafkalogconfiguration
#                  inputs:
#                    secureFile: kafka-log-configuration-$(enviroment).yaml
#                    retryCount: '2'
#                - task: DownloadSecureFile@1
#                  displayName: 'download tkmmscardmanager.yaml'
#                  name: tkmmscardmanager
#                  inputs:
#                    secureFile: tkmmscardmanager-$(enviroment).yaml
#                    retryCount: '2'
#                - task: Kubernetes@1
#                  displayName: 'apply keyvault-connection-informations.yaml'
#                  inputs:
#                    connectionType: Azure Resource Manager
#                    azureSubscriptionEndpoint: 'PM-subscription-sit'
#                    azureResourceGroup: 'DDS-Kubernetes'
#                    kubernetesCluster: 'ddsakstest'
#                    command: apply
#                    useConfigurationFile: true
#                    configuration: $(keyvaultconnectioninformations.secureFilePath)
#                - task: Kubernetes@1
#                  displayName: 'apply jvm.yaml'
#                  inputs:
#                    connectionType: Azure Resource Manager
#                    azureSubscriptionEndpoint: 'PM-subscription-sit'
#                    azureResourceGroup: 'DDS-Kubernetes'
#                    kubernetesCluster: 'ddsakstest'
#                    command: apply
#                    useConfigurationFile: true
#                    configuration: $(jvm.secureFilePath)
#                - task: Kubernetes@1
#                  displayName: 'apply kafka-log-configuration.yaml'
#                  inputs:
#                    connectionType: Azure Resource Manager
#                    azureSubscriptionEndpoint: 'PM-subscription-sit'
#                    azureResourceGroup: 'DDS-Kubernetes'
#                    kubernetesCluster: 'ddsakstest'
#                    command: apply
#                    useConfigurationFile: true
#                    configuration: $(kafkalogconfiguration.secureFilePath)
#                - task: Kubernetes@1
#                  displayName: 'apply tkmmscardmanager.yaml'
#                  inputs:
#                    connectionType: Azure Resource Manager
#                    azureSubscriptionEndpoint: 'PM-subscription-sit'
#                    azureResourceGroup: 'DDS-Kubernetes'
#                    kubernetesCluster: 'ddsakstest'
#                    command: apply
#                    useConfigurationFile: true
#                    configuration: $(tkmmscardmanager.secureFilePath)
                - task: AzureKeyVault@2
                  inputs:
                    azureSubscription: 'TKM-Subscription-sit'
                    KeyVaultName: 'kmn-tkm-pagopa-test'
                    SecretsFilter: '*'
                    RunAsPreJob: false
                - task: KubernetesManifest@0
                  displayName: "Create secret tkm-card-manager-kv-store-creds"
                  inputs:
                    action: createSecret
                    secretType: generic
                    secretName: tkm-card-manager-kv-store-creds
                    secretArguments: --from-literal=clientid=$(sit-clientid) --from-literal=clientsecret=$(sit-clientsecret)
                    kubernetesServiceConnection: 'ddsakstest-self-connection-tkm-sit'
                    namespace: tkm-sit
                - task: Kubernetes@1
                  displayName: "Create spc tkm-card-manager-spc"
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: 'ddsakstest-self-connection-tkm-sit'
                    namespace: tkm-sit
                    command: apply
                    useConfigurationFile: true
                    inline: |
                      apiVersion: secrets-store.csi.x-k8s.io/v1
                      kind: SecretProviderClass
                      metadata:
                        name: tkm-card-manager-spc
                      spec:
                        provider: azure
                        parameters:
                          usePodIdentity: "false"
                          useVMManagedIdentity: "false"
                          userAssignedIdentityID: ""
                          keyvaultName: "kmn-tkm-pagopa-test"
                          tenantId: $(sit-tenantid)
                          objects: |
                            array:
                              - |
                                objectName: sit-tz
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-appender-bootstrap-servers
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-enable-file-appender
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-enable-kafka-appender
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-log-file
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-appender-bootstrap-servers
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-azure-keyvault-profile
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-azure-keyvault-client-id
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-azure-keyvault-client-key
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-azure-keyvault-tenant-id
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-azure-keyvault-uri
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-consent-manager-url
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-db-server
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-delete-queue-group
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-delete-queue-topic
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-dlt-max-number-of-threads
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-dlt-queue-group
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-dlt-queue-topic
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-dlt-read-cron
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-group-id
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-read-queue-group
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-read-queue-topic
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-write-queue-group
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-write-queue-topic
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-rtd-hashing-url
                                objectType: secret
                                objectVersion: ""
                              - |
                                objectName: sit-kafka-cstar-bootstrap-servers
                                objectType: secret
                                objectVersion: ""
                        secretObjects:
                          - secretName: jvm
                            type: Opaque
                            data:
                              - key: TZ
                                objectName: sit-tz
                          - secretName: kafka-log-configuration
                            type: Opaque
                            data:
                              - key: KAFKA_APPENDER_BOOTSTRAP_SERVERS
                                objectName: sit-kafka-appender-bootstrap-servers
                              - key: ENABLE_FILE_APPENDER
                                objectName: sit-enable-file-appender
                              - key: ENABLE_KAFKA_APPENDER
                                objectName: sit-enable-kafka-appender
                              - key: LOG_FILE
                                objectName: sit-log-file
                              - key: KAFKA_APPENDER_TOPIC
                                objectName: sit-kafka-appender-topic
                          - secretName: keyvault-connection-informations
                            type: Opaque
                            data:
                              - key: AZURE_KEYVAULT_PROFILE
                                objectName: sit-azure-keyvault-profile
                              - key: AZURE_KEYVAULT_CLIENT_ID
                                objectName: sit-azure-keyvault-client-id
                              - key: AZURE_KEYVAULT_CLIENT_KEY
                                objectName: sit-azure-keyvault-client-key
                              - key: AZURE_KEYVAULT_TENANT_ID
                                objectName: sit-azure-keyvault-tenant-id
                              - key: AZURE_KEYVAULT_URI
                                objectName: sit-azure-keyvault-uri
                          - secretName: tkmmscardmanager
                            type: Opaque
                            data:
                              - key: CONSENT_MANAGER_URL
                                objectName: sit-consent-manager-url
                              - key: DB_SERVER
                                objectName: sit-db-server
                              - key: KAFKA_DELETE_QUEUE_GROUP
                                objectName: sit-kafka-delete-queue-group
                              - key: KAFKA_DELETE_QUEUE_TOPIC
                                objectName: sit-kafka-delete-queue-topic
                              - key: KAFKA_DLT_MAX_NUMBER_OF_THREADS
                                objectName: sit-kafka-dlt-max-number-of-threads
                              - key: KAFKA_DLT_QUEUE_GROUP
                                objectName: sit-kafka-dlt-queue-group
                              - key: KAFKA_DLT_QUEUE_TOPIC
                                objectName: sit-kafka-dlt-queue-topic
                              - key: KAFKA_DLT_READ_CRON
                                objectName: sit-kafka-dlt-read-cron
                              - key: KAFKA_GROUP_ID
                                objectName: sit-kafka-group-id
                              - key: KAFKA_READ_QUEUE_GROUP
                                objectName: sit-kafka-read-queue-group
                              - key: KAFKA_READ_QUEUE_TOPIC
                                objectName: sit-kafka-read-queue-topic
                              - key: KAFKA_WRITE_QUEUE_GROUP
                                objectName: sit-kafka-write-queue-group
                              - key: KAFKA_WRITE_QUEUE_TOPIC
                                objectName: sit-kafka-write-queue-topic
                              - key: RTD_HASHING_URL
                                objectName: sit-rtd-hashing-url
                              - key: KAFKA_CSTAR_BOOTSTRAP_SERVERS
                                objectName: sit-kafka-cstar-bootstrap-servers
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    namespace: tkm-sit
                    action: deploy
                    kubernetesServiceConnection: 'ddsakstest-self-connection-tkm-sit'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-$(enviroment).yml
                      $(Pipeline.Workspace)/manifests/service-$(enviroment).yml
                      $(Pipeline.Workspace)/manifests/ingress-$(enviroment).yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(pomversion)

  - stage: UAT
    displayName: UAT
    dependsOn: POM
    condition: and(eq(variables.isToDeploy, true), eq(variables.isUAT, true))
    variables:
      pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: eq(variables.isToDeploy, true)
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'

      - deployment: Deploy
        dependsOn: Build
        displayName: Deploy
        condition: and(succeeded(), eq(variables.isToDeploy, true), eq(variables.isUAT, true))
        pool:
          name: pagopa-agent-pool-uat
        environment: 'uat'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: 'Create Namespace'
                  inputs:
                    namespace: tkm-uat
                    action: deploy
                    kubernetesServiceConnection: 'u87-aks-pci-uat-self-connection-tkm'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/namespace-$(enviroment).yml
                - task: DownloadSecureFile@1
                  displayName: 'download keyvault-connection-informations.yaml'
                  name: keyvaultconnectioninformations
                  inputs:
                    secureFile: keyvault-connection-informations-$(enviroment).yaml
                    retryCount: '2'
                - task: DownloadSecureFile@1
                  displayName: 'download jvm.yaml'
                  name: jvm
                  inputs:
                    secureFile: jvm-$(enviroment).yaml
                    retryCount: '2'
                - task: DownloadSecureFile@1
                  displayName: 'download kafka-log-configuration.yaml'
                  name: kafkalogconfiguration
                  inputs:
                    secureFile: kafka-log-configuration-$(enviroment).yaml
                    retryCount: '2'
                - task: DownloadSecureFile@1
                  displayName: 'download tkmmscardmanager.yaml'
                  name: tkmmscardmanager
                  inputs:
                    secureFile: tkmmscardmanager-$(enviroment).yaml
                    retryCount: '2'
                - task: Kubernetes@1
                  displayName: 'apply keyvault-connection-informations.yaml'
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscriptionEndpoint: 'U87-PagoPa-PCI-uat(e7feb90c-fcc2-40a2-ba56-d68ec301c6c0)'
                    azureResourceGroup: 'U87-AKS-pci-uat'
                    kubernetesCluster: 'U87-AKS-pci-uat'
                    command: apply
                    useConfigurationFile: true
                    configuration: $(keyvaultconnectioninformations.secureFilePath)
                - task: Kubernetes@1
                  displayName: 'apply jvm.yaml'
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscriptionEndpoint: 'U87-PagoPa-PCI-uat(e7feb90c-fcc2-40a2-ba56-d68ec301c6c0)'
                    azureResourceGroup: 'U87-AKS-pci-uat'
                    kubernetesCluster: 'U87-AKS-pci-uat'
                    command: apply
                    useConfigurationFile: true
                    configuration: $(jvm.secureFilePath)
                - task: Kubernetes@1
                  displayName: 'apply kafka-log-configuration.yaml'
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscriptionEndpoint: 'U87-PagoPa-PCI-uat(e7feb90c-fcc2-40a2-ba56-d68ec301c6c0)'
                    azureResourceGroup: 'U87-AKS-pci-uat'
                    kubernetesCluster: 'U87-AKS-pci-uat'
                    command: apply
                    useConfigurationFile: true
                    configuration: $(kafkalogconfiguration.secureFilePath)
                - task: Kubernetes@1
                  displayName: 'apply tkmmscardmanager.yaml'
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscriptionEndpoint: 'U87-PagoPa-PCI-uat(e7feb90c-fcc2-40a2-ba56-d68ec301c6c0)'
                    azureResourceGroup: 'U87-AKS-pci-uat'
                    kubernetesCluster: 'U87-AKS-pci-uat'
                    command: apply
                    useConfigurationFile: true
                    configuration: $(tkmmscardmanager.secureFilePath)
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    namespace: tkm-uat
                    action: deploy
                    kubernetesServiceConnection: 'u87-aks-pci-uat-self-connection-tkm'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-$(enviroment).yml
                      $(Pipeline.Workspace)/manifests/service-$(enviroment).yml
                      $(Pipeline.Workspace)/manifests/ingress-$(enviroment).yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(pomversion)
  # - stage: PROD
  #   displayName: PROD
  #   dependsOn: POM
  #   condition: and(eq(variables.isToDeploy, true), eq(variables.isPROD, true))
  #   variables:
  #     pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageNameDefault)
  #       steps:
  #         - task: DownloadSecureFile@1
  #           displayName: 'download settings.xml for Maven'
  #           name: settingsxml
  #           inputs:
  #             secureFile: 'settings_v2.xml'
  #             retryCount: '2'
  #         - task: Maven@3
  #           inputs:
  #             mavenPomFile: 'pom.xml'
  #             goals: 'deploy'
  #             options: '-B -s $(settingsxml.secureFilePath) -DskipTests=true'
  #             javaHomeOption: 'JDKVersion'
  #             jdkVersionOption: '1.8'
  #             mavenVersionOption: 'Default'
  #             mavenOptions: '-Xmx3072m'
  #             mavenAuthenticateFeed: false
  #             effectivePomSkip: true
  #             sonarQubeRunAnalysis: false
  #         - task: Docker@2
  #           displayName: Build and push an image to container registry
  #           condition: succeeded()
  #           inputs:
  #             containerRegistry: '$(dockerRegistryServiceConnection)'
  #             repository: '$(imageRepository)'
  #             command: 'buildAndPush'
  #             Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
  #             buildContext: '$(Build.Repository.LocalPath)'
  #             tags: |
  #               $(Build.BuildId)
  #               latest
  #               $(pomversion)
  #         - task: PublishPipelineArtifact@1
  #           displayName: 'Publish Atrifact manifests'
  #           condition: and(succeeded(), eq(variables.isToDeploy, true))
  #           inputs:
  #             targetPath: '$(Build.Repository.LocalPath)/manifests'
  #             artifact: 'manifests'
  #             publishLocation: 'pipeline'

  #     - deployment: Deploy
  #       displayName: Deploy
  #       dependsOn: Build
  #       pool:
  #         name: prod-agent-pool
  #       environment: 'prod'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - download: none
  #               - task: DownloadPipelineArtifact@2
  #                 inputs:
  #                   buildType: 'current'
  #                   artifactName: 'manifests'
  #                   targetPath: '$(Pipeline.Workspace)/manifests'
  #               - task: KubernetesManifest@0
  #                 displayName: Deploy to Kubernetes cluster
  #                 inputs:
  #                   action: 'deploy'
  #                   kubernetesServiceConnection: ''
  #                   namespace: ''
  #                   manifests: |
  #                     $(Pipeline.Workspace)/manifests/$(deployment).yml
  #                                  $(Pipeline.Workspace)/manifests/service-$(enviroment).yml
  #                   containers: '$(containerRegistry)/$(imageRepository):$(pomversion)'
  #                   imagePullSecrets: '$(imagePullSecret)'